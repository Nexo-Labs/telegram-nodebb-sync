# Workflow de GitHub Actions para Construir y Publicar la Imagen Docker en GHCR
# Trigger: Creación de etiquetas que empiezan con 'v' (ej: v1.0.0)

name: Build and Push Docker Image to GHCR

on:
  push:
    tags:
      - 'v*' # Se activa con etiquetas como v1.0, v2.3.4, etc.

env:
  # Usar ghcr.io para GitHub Container Registry
  REGISTRY: ghcr.io
  # Nombre de la imagen: ghcr.io/<OWNER>/<REPO>/<IMAGE_NAME_SUFFIX>
  # Usamos github.repository que es <OWNER>/<REPO> y añadimos el sufijo
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read       # Necesario para checkout
      packages: write      # Necesario para push a GHCR
      id-token: write      # Necesario para signing con cosign/OIDC

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Compilación TypeScript (NECESARIO ANTES DE CONSTRUIR DOCKER) ---
      # La imagen Docker necesita el código JS compilado en functions/lib
      - name: Set up Node.js for Build
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Asegurar que coincide con package.json y Dockerfile
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Build Dependencies & Compile TypeScript
        run: |
          cd functions
          npm ci
          npm run build # Ejecuta 'tsc' y genera la carpeta ./lib
      # ---------------------------------------------------------------------

      - name: Install cosign
        # Solo firmar en pushes a tags reales, no en PRs (aunque este workflow no se activa en PRs)
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Token automático de GitHub Actions

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Genera tags basados en la etiqueta git (ej: v1.2.3 -> 1.2.3)
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: . # El contexto es la raíz del repo, donde está el Dockerfile
          file: ./Dockerfile # Ruta al Dockerfile que creamos en la raíz
          push: ${{ github.event_name != 'pull_request' }} # Solo pushear en tags
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # Firma la imagen usando la identidad OIDC de GitHub Actions con Sigstore/Fulcio
        run: |
          echo "Signing tags: ${TAGS}"
          echo "Digest: ${DIGEST}"
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST} 