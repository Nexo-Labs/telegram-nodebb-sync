---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT OVERVIEW

This project aims to synchronize messages from a Telegram group to a NodeBB forum.  The synchronization is performed by a scheduled Firebase Cloud Function, which retrieves messages containing specific hashtags and a "Titulo:" line, and creates new topics in NodeBB.  The system uses Firebase Firestore to track processed messages.  Version 3 of the functional requirements is the most up-to-date specification.

## CODE STYLE

TypeScript will be the primary language.  The code will follow functional programming principles: immutability, pure functions where possible, and clear separation of side effects. All exported functions will receive a single JSON object as input and return a typed result.

## FOLDER ORGANIZATION

The project will use the following folder structure:

- `/Users/ruben/CascadeProjects/telegram-nodebb-sync/` (root)
    - `functions/`
        - `src/` (TypeScript source code)
            - `config.ts`
            - `telegramApi.ts`
            - `nodebbApi.ts`
            - `firestoreService.ts`
            - `messageParser.ts`
            - `index.ts`
        - `lib/` (Compiled JavaScript code - generated by `tsc`)
    - `.devcontainer/` (Devcontainer configuration)
    - `.github/workflows/` (GitHub Actions workflows)
        - `deploy.yml`
        - `build_docker.yml`
    - `Dockerfile`
    - `README.md`
    - `requisitos_sincronizacion.md`
    - `setting_de_secretos.md`
    - `setting_env_variables.md`
    - `docker_deploy_and_run.md`
    - `implementation_plan.md`
    - `functional_typescript_guidelines.md`
    - `.env.template`
    - `.gitignore`


## TECH STACK

- Node.js (v18)
- TypeScript
- Firebase (Functions, Firestore, Secret Manager, Cloud Scheduler)
- axios
- Google Cloud SDK
- Docker
- GitHub Actions
- cosign (for Docker image signing)


## PROJECT-SPECIFIC STANDARDS

- All configuration parameters will be managed externally via environment variables or Google Secret Manager.
- The comparison of hashtags will be case-insensitive.
- The "Titulo: " line will be case-sensitive.
- Only new messages will be processed.  Edits and deletions of messages will be ignored.

## WORKFLOW & RELEASE RULES

- Development will be done using Devcontainers.
- Deployment will be done using GitHub Actions, triggered by creating and pushing Git tags that start with `v`.
- Two workflows are used: one for deploying to Firebase Functions, and one for building and pushing a Docker image to GHCR.
- The Firebase Function will run daily at 9:00 AM UTC.

## REFERENCE EXAMPLES

- `.env.template` provides a template for environment variables.
- `setting_de_secretos.md` explains how to set up secrets in Google Secret Manager.
- `setting_env_variables.md` explains how to set up environment variables for deployment.
- `docker_deploy_and_run.md` explains how to deploy and run the application as a Docker container.

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

- `README.md`: Project overview, setup, and testing.
- `requisitos_sincronizacion.md`: Detailed software requirements specification.
- `functional_typescript_guidelines.md`: Guidelines for functional and TypeScript coding.
- `implementation_plan.md`: Step-by-step implementation plan.


## DEBUGGING

- Use `functions.logger` for detailed logging.
- Check Cloud Logging/Firebase Console for errors during function execution.

## FINAL DOs AND DON'Ts

- **DO** use Google Secret Manager for storing API tokens and other sensitive information.
- **DO** use `functions.logger` for logging.
- **DO** follow the functional programming and TypeScript guidelines.
- **DON'T** commit `.env` files or secrets to Git.
- **DON'T** rely on global installs of TypeScript or Firebase CLI. Use `devcontainer.json` for consistent local environment.
- **DON'T** use the `any` type unless absolutely necessary.